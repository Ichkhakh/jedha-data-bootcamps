from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException


class Webscrapper : 
    def __init__(self,amount,category,difficulty,type_,url="https://opentdb.com/api_config.php") :
        self.url = url 
        self.amount = amount
        self.category = category
        self.difficulty = difficulty
        self.type = type_ 
        try : 
            driver = webdriver.Chrome()
            driver.get(self.url)
        except : 
            print("Error: Couldn't initialized selenium webdriver")
            self.driver = None 
        else : 
            self.driver = driver


    def _api_close_driver(self): 
        """
        Close the initialized driver in Class contructor. 

        Args : 
            None 
        Returns : 
            None         
        """      
        try:
            if self.driver:
                self.driver.quit()
        except:
            print("Error: an error occured during the shutdonw of ChromiumDriver.")
                    

    def _api_amount_getter(self,xpath='//input[@name="trivia_amount"]'):
        """
        Retrieves the current value from the trivia amount input field.

        Args:
            xpath (str): XPath to locate the amount input element.

        Returns:
            str: The current value of the amount input field.
        """
        try: 
            amount = self.driver.find_element(By.XPATH,xpath)
        except : 
            print(f"Error : cant find element with xpath {xpath}")
        else : 
            amount_value = amount.get_attribute("value")
            return amount_value 
        
    def _api_amount_setter(self,amount_value,xpath='//input[@name="trivia_amount"]'):
        """
        Set user value from the trivia amount input field.

        Args:
            amount_value (str) : the amount of questions generated by the api.
            xpath (str): XPath to locate the amount input element.

        Returns:
            None
        """
        try: 
            amount = self.driver.find_element(By.XPATH,xpath)
        except : 
            print(f"Error : cant find element with xpath {xpath}")
        else : 
            amount.clear()
            amount.send_keys(str(amount_value))

    def _api_category_getter(self,xpath = '//select[@name="trivia_category"]'):
        """
        Retrieves all available quiz category options.

        Args:
            xpath (str): XPath to locate the category dropdown.

        Returns:
            list: List of WebElement options in the category dropdown.
        """
        try : 
            category_list = []
            category_choices = self.driver.find_element(By.XPATH,xpath)
        except : 
            print(f"Error : no such input element {xpath} is found")
        else :          
            category_options = category_choices.find_elements(By.TAG_NAME,"option")
            for category in category_options : 
                category_list.append(category)  
        finally:
            return category_list

    def _api_category_setter(self,str_category,xpath = '//select[@name="trivia_category"]'):
        """
        Sets the quiz category in the dropdown.

        Args:
            str_category (str): The category label (e.g., "General Knowledge").
            xpath (str): XPath to locate the category dropdown.

        Returns:
            None
        """
        try : 
            category_choices = self.driver.find_element(By.XPATH,xpath)
        except : 
            print(f"Error : no such input element {xpath} is found")
        else :    
            try:      
                category_options = category_choices.find_element(By.XPATH,f'//option[text()="{str_category}"]')
            except : 
                print(f"Error : Couldn't select the category {str_category}")
            else : 
                category_options.click()
 
    def _api_difficulty_getter(self,xpath = '//select[@name="trivia_difficulty"]'):
        """
        Retrieves all available difficulty levels.

        Args:
            xpath (str): XPath to locate the difficulty dropdown.

        Returns:
            list: List of WebElement options in the difficulty dropdown.
        """
        try : 
            difficulty_list = []
            difficulty_choices = self.driver.find_element(By.XPATH,xpath)
        except : 
            print(f"Error : no such input element {xpath} is found")
        else : 
            difficulty_options = difficulty_choices.find_elements(By.TAG_NAME,"option")
            for difficulty in difficulty_options : 
                difficulty_list.append(difficulty)
        finally:
            return difficulty_list

    def _api_difficulty_setter(self, str_difficulty, xpath='//select[@name="trivia_difficulty"]'):
        """
        Sets the difficulty level in the dropdown.

        Args:
            str_difficulty (str): The difficulty label (e.g., "Easy", "Medium").
            xpath (str): XPath to locate the difficulty dropdown.

        Returns:
            None
        """
        try:
            difficulty_choices = self.driver.find_element(By.XPATH, xpath)           
        except NoSuchElementException:
            print(f"Error: Couldn't select the difficulty '{str_difficulty}'.")
        else : 
            difficulty_option = difficulty_choices.find_element(By.XPATH, f'.//option[text()="{str_difficulty}"]')
            difficulty_option.click()

    def _api_type_getter(self, xpath='//select[@name="trivia_type"]'):
        """
        Retrieves all available question types.

        Args:
            xpath (str): XPath to locate the type dropdown.

        Returns:
            list: List of WebElement options in the type dropdown.
        """
        type_list = []
        try:
            type_choices = self.driver.find_element(By.XPATH, xpath)
            type_list = type_choices.find_elements(By.TAG_NAME, "option")
        except NoSuchElementException:
            print(f"Error: No such input element {xpath} is found.")
        finally:
            return type_list

    def _api_type_setter(self, str_type, xpath='//select[@name="trivia_type"]'):
        """
        Sets the question type in the dropdown.

        Args:
            str_type (str): The type label (e.g., "Multiple Choice", "True / False").
            xpath (str): XPath to locate the type dropdown.

        Returns:
            None
        """
        try:
            type_choices = self.driver.find_element(By.XPATH, xpath)
            type_option = type_choices.find_element(By.XPATH, f'.//option[text()="{str_type}"]')
            type_option.click()
        except NoSuchElementException:
            print(f"Error: Couldn't select the type '{str_type}'.")

            
    def api_url_generator(self): 
        """
        Generate the url api based on user inputs

        Args:
            str_type (str): The type label (e.g., "Multiple Choice", "True / False").
            xpath (str): XPath to locate the type dropdown.

        Returns:
            api_url (str) : API url 
        """
        try:
            self._api_amount_setter(self.amount)
            self._api_category_setter(self.category)
            self._api_difficulty_setter(self.difficulty)
            self._api_type_setter(self.type)

            generation_btn = self.driver.find_element(By.XPATH,'//button[@type="submit"]')
            generation_btn.click()
        except NoSuchElementException : 
            print("Error: submit button error.")
        else:
            url_api = None
            try:
                generated_api_link = self.driver.find_element(By.XPATH,'//input[@class="form-control"]')
                url_api = generated_api_link.get_attribute("Value")
            except NoSuchElementException:
                print("Error: The trivia didn't generate the URL, can't find the HTML input.")
            finally:
                return url_api

    